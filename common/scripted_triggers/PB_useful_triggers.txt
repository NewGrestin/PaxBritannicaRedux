# this is a check to see if a major is an actual major due to its number of factories
# meaning it's the top 7 in the world or has at least 70% of the average of those 7
# we're also including a number of tags which should act like majors even if they're not in that category
is_actual_major = {
	custom_trigger_tooltip = {
		tooltip = is_actual_major
		is_major = yes
		num_of_factories > 35 #MAJOR_MIN_FACTORIES

		# rank the majors according to their num_of_factories
		get_sorted_scored_countries_temp = {
			scorer = major_industry_count_scorer
			array = actual_majors
		}

		# limit that ranking to the top 7
		resize_temp_array = { actual_majors = 7 }

		OR = {
			# is one of the seven largest
			is_in_array = { actual_majors = THIS }

			#is an exception
			tag = INT
			tag = ENT
			tag = GEX

			# has more than 70% of the average of the top 7
			set_temp_variable = { factory_average = 0 }
			all_of_scopes = {
				array = actual_majors
				add_to_temp_variable = { factory_average = THIS.num_of_factories }
			}
			divide_temp_variable = { factory_average = 4.9 }
			num_of_factories > factory_average
		}
	}
}

is_actual_major_without_exceptions = {
	custom_trigger_tooltip = {
		tooltip = is_actual_major_without_exceptions
		is_major = yes
		num_of_factories > 35 #MAJOR_MIN_FACTORIES

		# rank the majors according to their num_of_factories
		get_sorted_scored_countries_temp = {
			scorer = major_industry_count_scorer
			array = actual_majors
		}

		# limit that ranking to the top 7
		resize_temp_array = { actual_majors = 7 }

		OR = {
			# is one of the seven largest
			is_in_array = { actual_majors = THIS }

			# has more than 70% of the average of the top 7
			set_temp_variable = { factory_average = 0 }
			all_of_scopes = {
				array = actual_majors
				add_to_temp_variable = { factory_average = THIS.num_of_factories }
			}
			divide_temp_variable = { factory_average = 4.9 }
			num_of_factories > factory_average
		}
	}
}

# Can be used in any country scope (to ensure the country has no owned state which it doesn't control)
controls_all_owned_states = {
	surrender_progress < 0.05
}

# Checks if the country is in a faction or a puppet
is_ally_of_ROOT = {
	custom_trigger_tooltip = {
		tooltip = KR_is_an_ally
		is_ally_with = ROOT
		NOT = { tag = ROOT }
	}
}

is_ally_of_PREV = {
	hidden_trigger = { country_exists = PREV } #needed to avoid error log spam
	custom_trigger_tooltip = {
		tooltip = KR_is_an_ally
		is_ally_with = PREV
		NOT = { tag = PREV }
	}
}

# Can be used in state scope, to check if the owner is ROOT or a subject of ROOT
is_owned_by_ROOT_or_subject = {
	custom_trigger_tooltip = {
		tooltip = KR_owned_by_ROOT_or_subject
		owner = {
			OR = {
				tag = ROOT
				is_subject_of = ROOT
			}
		}
	}
}

# Can be used in state scope, to check if the owner is ROOT or an ally/subject of ROOT
is_owned_by_ROOT_or_ally = {
	owner = { is_ally_with = ROOT }
}

is_owned_by_ROOT_or_war_ally = {
	owner = {
		OR = {
			is_ally_with = ROOT
			has_war_together_with = ROOT
		}
	}
}

# Can be used in state scope, to check if the controller (not owner) is ROOT or a subject of ROOT
is_controlled_by_ROOT_or_subject = {
	custom_trigger_tooltip = {
		tooltip = KR_controlled_by_ROOT_or_subject
		controller = {
			OR = {
				tag = ROOT
				is_subject_of = ROOT
			}
		}
	}
}

# Can be used in state scope, to check if the controller (not owner) is ROOT or ally/subject of ROOT
is_controlled_by_ROOT_or_ally = {
	controller = { is_ally_with = ROOT }
}

# Can be used in state scope, to check if the owner and controller is ROOT or a subject of ROOT
is_owned_and_controlled_by_ROOT_or_subject = {
	custom_trigger_tooltip = {
		tooltip = KR_owned_and_controlled_by_ROOT_or_subject
		owner = {
			controls_state = PREV
			OR = {
				tag = ROOT
				is_subject_of = ROOT
			}
		}
	}
}

# Can be used in state scope, to check if the owner and controller is ROOT or a subject of ROOT
is_owned_and_controlled_by_ROOT_or_ally = {
	custom_trigger_tooltip = {
		tooltip = KR_owned_and_controlled_by_ROOT_or_ally
		owner = {
			controls_state = PREV
			is_ally_with = ROOT
		}
	}
}

is_actual_neighbor_of_ROOT_or_ally = {
	any_neighbor_country = {
		is_owner_neighbor_of = PREV
		is_ally_with = ROOT
	}
}

# Used to check whether a country is eligible for peace deal events
is_valid_peace_target = {
	is_subject = no
	OR = {
		is_in_faction = no
		is_faction_leader = yes
	}
}

# Used to check whether a country is eligible for peace deal events
is_valid_peace_target_against_PREV = {
	OR = {
		is_subject = no
		overlord = { NOT = { has_war_with = PREV.PREV } }
	}
	OR = {
		is_in_faction = no
		is_faction_leader = yes
		faction_leader = { NOT = { has_war_with = PREV.PREV } }
	}
}

# Used to check whether a country is eligible for peace deal events
is_valid_peace_target_against_FROM = {
	OR = {
		is_subject = no
		overlord = { NOT = { has_war_with = FROM } }
	}
	OR = {
		is_in_faction = no
		is_faction_leader = yes
		faction_leader = { NOT = { has_war_with = FROM } }
	}
}

# in state scope
is_claim_or_core_of_ROOT = {
	OR = {
		is_claimed_by = ROOT
		is_core_of = ROOT
	}
}

# in state scope
is_claim_or_core_of_FROM = {
	OR = {
		is_claimed_by = FROM
		is_core_of = FROM
	}
}

# in state scope
is_claim_or_core_of_PREV = {
	OR = {
		is_claimed_by = PREV
		is_core_of = PREV
	}
}

# in state scope
is_claim_or_core_of_PREVPREV = {
	OR = {
		is_claimed_by = PREV.PREV
		is_core_of = PREV.PREV
	}
}

# in state scope
is_claim_or_core_of_owner = {
	OR = {
		is_claimed_by = owner
		is_core_of = owner
	}
}

is_metropolis_state = {
	OR = {
		has_state_category = twelve
		has_state_category = eleven
		has_state_category = ten
	}
}

is_valid_state_for_development = {
	impassable = no
	NOT = {
		has_state_category = wasteland
		has_state_category = zero_island
		has_state_category = one_island
	}
}

prefer_core_states_unless_filled = {
	OR = {
		is_core_of = owner
		AND = {
			is_claimed_by = owner
			NOT = {
				owner = {
					any_core_state = {
						free_building_slots = { building = industrial_complex size > 0 include_locked = yes }
						is_owned_and_controlled_by = PREV
						is_valid_state_for_development = yes
					}
				}
			}
		}
	}
}

prefer_core_states_unless_filled_dockyard = {
	OR = {
		is_core_of = owner
		AND = {
			is_claimed_by = owner
			NOT = {
				owner = {
					any_core_state = {
						free_building_slots = { building = dockyard size > 0 include_locked = yes }
						is_owned_and_controlled_by = PREV
						is_valid_state_for_development = yes
					}
				}
			}
		}
	}
}

prefer_core_states_unless_filled_infrastructure = {
	OR = {
		is_core_of = owner
		AND = {
			is_claimed_by = owner
			NOT = {
				owner = {
					any_core_state = {
						free_building_slots = { building = infrastructure size > 0 }
						is_owned_and_controlled_by = PREV
						is_valid_state_for_development = yes
					}
				}
			}
		}
	}
}

prefer_home_area_states_unless_filled = {
	OR = {
		is_in_home_area = yes
		NOT = {
			owner = {
				any_owned_state = {
					free_building_slots = { building = industrial_complex size > 0 include_locked = yes }
					is_in_home_area = yes
					is_valid_state_for_development = yes
				}
			}
		}
	}
}

prefer_home_area_states_unless_filled_dockyard = {
	OR = {
		is_in_home_area = yes
		NOT = {
			owner = {
				any_owned_state = {
					free_building_slots = { building = dockyard size > 0 include_locked = yes }
					is_in_home_area = yes
					is_valid_state_for_development = yes
				}
			}
		}
	}
}

prefer_home_area_states_unless_filled_infrastructure = {
	OR = {
		is_in_home_area = yes
		NOT = {
			owner = {
				any_owned_state = {
					free_building_slots = { building = infrastructure size > 0 }
					is_in_home_area = yes
					is_valid_state_for_development = yes
				}
			}
		}
	}
}

valid_state_for_spawning_friendly_unit = {
	is_in_home_area = yes
	impassable = no
}

has_specialist_level_trigger = {
	skill > 5
	skill < 6
}

has_expert_level_trigger = {
	skill > 6
	skill < 7
}

has_genius_level_trigger = {
	skill > 7
}

has_war_with_non_exiled_country = {
	custom_trigger_tooltip = {
		tooltip = has_war_with_non_exiled_country_tt
		has_war = yes
		any_enemy_country = {
			is_government_in_exile = no
		}
	}
}

cannot_call_allies_or_join_wars = {
	check_variable = { modifier@cannot_call_allies_or_join_wars > 0 }
}

owns_state_with_naval_base = {
	any_owned_state = {
		hidden_trigger = {
			is_coastal = yes
			is_controlled_by = PREV
		}
		any_province_building_level = {
			province = {
				all_provinces = yes
				limit_to_coastal = yes
			}
			building = naval_base
			level > 0
		}
	}
}

is_controlled_by_ROOT_owner_or_mutual_enemy = {
	OR = {
		is_controlled_by = ROOT
		is_controlled_by = owner
		controller = {
			has_war_with = ROOT
			has_war_with = PREV.owner
		}
	}
}

is_controlled_by_ROOT_or_owner = {
	OR = {
		is_controlled_by = ROOT
		is_controlled_by = owner
	}
}

is_in_faction_but_not_leader = {
	is_in_faction = yes
	is_faction_leader = no
}

is_colonial_tag = {
	OR = {
		original_tag = MAF #ignore colonial tags
		original_tag = GEA #ignore colonial tags
		original_tag = DEI #ignore colonial tags
	}
}

country_is_not_unfriendly_towards_PREV = {
	exists = yes
	OR = {
		is_subject = no
		is_subject_of = ROOT
	}
	OR = {
		is_in_faction = no
		is_in_faction_with = ROOT
	}
	has_capitulated = no
	both_socialist_or_both_not_socialist = yes
	at_war_with_or_justifying_wargoal_against_ROOT = no
}

#for use in decision/focus availables, requires a temp variable target
no_war_or_wargoal_against_TARGET = {
	NOT = { has_war_with = var:target }
	NOT = { has_wargoal_against = var:target }
	NOT = { is_justifying_wargoal_against = var:target }
	NOT = { var:target = { has_wargoal_against = PREV } }
	NOT = { var:target = { is_justifying_wargoal_against = PREV } }
}

#for use in decision/focus availables, requires a temp variable target
is_TARGET_valid_for_war_or_wargoal = {
	can_declare_war_on = var:target
	NOT = { has_non_aggression_pact_with = var:target }
	NOT = { has_guaranteed = var:target }
}

has_maximum_radar_station_level = {
	NOT = { radar_station < 6 }
}
