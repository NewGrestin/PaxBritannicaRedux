PB_state_focus_0_ai = {
	has_war = no
	free_building_slots = {
		building = industrial_complex
		size > 0
		include_locked = no
	}
	# this should be a low priority and only done when you dont need to do the others
	PB_state_focus_1_ai = no
	PB_state_focus_3_ai = no
	PB_state_focus_4_ai = no
}

PB_state_focus_1_ai = {
	ROOT = {
		OR = {
			check_variable = { ai_attitude_is_threatened = 1 }
			AND = {
				has_war = yes
				all_allied_country = {
					add_to_temp_variable = { our_side_mils = num_of_military_factories }
				}
				add_to_temp_variable = { our_side_mils = num_of_military_factories }
				all_enemy_country = {
					add_to_temp_variable = { enemy_side_mils = num_of_military_factories }
				}
				multiply_temp_variable = { enemy_side_mils = 1.1 }
				check_variable = { enemy_side_mils > our_side_mils }
			}
		}
	}
	free_building_slots = {
		building = arms_factory
		size > 0
		include_locked = no
	}
}

PB_state_focus_2_ai = {
	free_building_slots = {
		building = infrastructure
		size > 0
		include_locked = no
	}
	# this should be a low priority and only done when you dont need to do the others
	PB_state_focus_0_ai = no
	PB_state_focus_1_ai = no
	PB_state_focus_3_ai = no
	PB_state_focus_4_ai = no
}

PB_state_focus_3_ai = {
	is_core_of = ROOT
	ROOT = {
		NOT = { has_idea = disarmed_nation }
		OR = {
			has_war = yes
			set_temp_variable = { temp_ratio = manpower_k }
			divide_temp_variable = { temp_ratio = total_manpower_k }
			check_variable = { temp_ratio < 0.005 }
		}
		all_core_state = {
			add_to_temp_array = { core_state_pops = state_population_k }
		}
	}
	# yea i couldve done this via a recursive scripted trigger but im kinda lazy soooo
	find_highest_in_array = {
		array = core_state_pops
		index = most_populous_state
	}
	remove_from_temp_array = { array = core_state_pops index = most_populous_state }
	find_highest_in_array = {
		array = core_state_pops
		index = second_most_populous_state
	}
	if = {
		limit = {
			check_variable = { core_state_pops^num > 0 }
		}
		remove_from_temp_array = { array = core_state_pops index = second_most_populous_state }
	}
	find_highest_in_array = {
		array = core_state_pops
		index = third_most_populous_state
	}
	if = {
		limit = {
			check_variable = { core_state_pops^num > 0 }
		}
		remove_from_temp_array = { array = core_state_pops index = third_most_populous_state }
	}
	OR = {
		state = var:ROOT.core_states^most_populous_state
		state = var:ROOT.core_states^second_most_populous_state
		state = var:ROOT.core_states^third_most_populous_state
	}
}

PB_state_focus_4_ai = {
	add_to_temp_array = { temp_resources = token:grain }
	add_to_temp_array = { temp_resources = token:chromium }
	add_to_temp_array = { temp_resources = token:steel }
	add_to_temp_array = { temp_resources = token:tungsten }
	add_to_temp_array = { temp_resources = token:rubber }
	add_to_temp_array = { temp_resources = token:aluminium }
	add_to_temp_array = { temp_resources = token:oil }
	any_of = {
		array = temp_resources
		check_variable = { ROOT.resource@var:v < 0 }
		meta_trigger = {
			text = { [V] > 0 }
			V = "[?v.GetTokenKey]"
		}
	}
}